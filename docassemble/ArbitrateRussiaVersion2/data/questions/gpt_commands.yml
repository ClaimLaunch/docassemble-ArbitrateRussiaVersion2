---
modules:
  - .background
---
objects:
  - r: DARedis
  - asset: Event
---
mandatory: True
code: |
  log_key = r.key('log:' + user_info().session)
  messages = list()
---
event: gpt
code: |
  asset.events = "test asset events"
  asset.use = "test asset use"
  asset.initial_value = 5000
  asset.improved = True
  asset.additional_investment = 10000
  asset.assessment = True
  asset.value = 18000
  asset.value_explanation = "test value explanation"
  asset.development = "I painted the walls"

  if the_task.ready():
    last_messages_retrieved
    final_screen
  else:
    waiting_screen
---
code: |
  the_task = background_action('bg_task', 'refresh', events=asset.events,use=asset.use, initial_value=asset.initial_value, improved=asset.improved, additional_investment=asset.additional_investment, development=asset.development, assessment=asset.assessment, value=asset.value, value_explanation=asset.value_explanation)
---
event: bg_task
code: |
  r.rpush(log_key, 'Processing information')
  use = use_gpt(action_argument('use'))
  r.rpush(log_key, 'Completed asset description processing.')
  events = events_gpt(action_argument('events'))
  r.rpush(log_key, 'Completed events description processing.')
  damages=damages_gpt(asset.initial_value, asset.improved, asset.additional_investment,   asset.development, asset.assessment, asset.value, asset.value_explanation)
  r.rpush(log_key, 'Completed damages calculations processing.')
  background_response_action('bg_resp', use=use, events=events, damages=damages)
---
event: bg_resp
code: |
  use_description = action_argument('use')
  events_description = action_argument('events')
  damages_description = action_argument('damages')
  total_damages = total_damages_gpt(damages_description)
  background_response()
---
event: waiting_screen
section: generate
question: |
  Hold tight while our AI models edit your document.   [FILE ai_pen.gif, 10%]
subquestion: |
  <ul class="list-group" id="logMessages">
  </ul>
check in: get_log
---
event: get_log
code: |
  import json
  new_messages = ''
  while True:
    message = r.lpop(log_key)
    if message:
      messages.append(message.decode())
      new_messages += '<li class="list-group-item">' + message.decode() + '</li>'
      continue
    break
  background_response('$("#logMessages").append(' + json.dumps(new_messages) + ')', 'javascript')
---
code: |
  while True:
    message = r.lpop(log_key)
    if message:
      messages.append(message.decode())
      continue
    break
  last_messages_retrieved = True
---
event: final_screen
section: generate
question: |
  Your document is ready - click continue to review.
subquestion: |

  <ul class="list-group" id="logMessages">
  % for message in messages:
    <li class="list-group-item">${ message }</li>
  % endfor
  </ul>
     
action buttons:
  - label: Continue
    action: final_review